<?php

namespace {{ namespace }}\Form\Type{{ entity_namespace ? '\\' ~ entity_namespace : '' }};

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;

class {{ form_class }} extends AbstractType
{
    /**
     * {@inheritdoc}
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
        {% for field, metadata in fields -%}
        {%- if metadata.type == 'relation' or metadata.type == 'relation_many' %}

            ->add('{{ field }}', 'filter_entity', array('class' => '{{ metadata.entity }}'))
        {%- elseif metadata.type == 'boolean' %}

            ->add('{{ field }}', 'filter_boolean')
        {%- elseif metadata.type == 'integer' and field != 'id' %}

            ->add('{{ field }}', 'filter_number')
        {%- elseif metadata.type == 'date' or metadata.type == 'datetime' %}

            ->add('{{ field }}', 'filter_date')
        {%- elseif field != 'id' %}

            ->add('{{ field }}', 'filter_text')
        {%- endif %}
        {%- endfor %}

        ;
    }

    /**
     * {@inheritdoc}
     */
    public function setDefaultOptions(OptionsResolverInterface $resolver)
    {
        $resolver->setDefaults(array(
            'data_class'        => '{{ bundle_namespace }}\Entity{{ entity_namespace ? '\\' ~ entity_namespace : '' }}\{{ entity_class }}',
            'csrf_protection'   => false,
            'validation_groups' => array('filter'),
            'method'            => 'GET',
            'translation_domain' =>  '{{entity_class}}',
        ));
    }

    /**
     * {@inheritdoc}
     */
    public function getName()
    {
        return '{{ entity_class|lower }}_filter';
    }
}
