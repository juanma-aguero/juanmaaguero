{% macro fieldValue(metadata, text = 'Lorem ipsum dolor sit amet') %}
{% spaceless %}
        {% if metadata.type == 'relation' or metadata.type == 'relation_many' %}
            $this->getReference('{{ metadata.entity|lower|split('\\')|last }}{{ i }}')
        {% elseif metadata.type == 'boolean' %}
            true
        {% elseif metadata.type == 'integer' or metadata.type == 'smallint' %}
            42
        {% elseif metadata.type == 'decimal' %}
            10.99
        {% elseif metadata.type == 'date' or metadata.type == 'datetime' %}
            new \DateTime()
        {%- else %}
            '{{ text }}'
        {%- endif %}
{% endspaceless %}
{% endmacro %}
{% from _self import fieldValue -%}
<?php

namespace {{ namespace }}\Tests\Controller{{ entity_namespace ? '\\' ~ entity_namespace : '' }};

{% block use_statements %}
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
{% endblock use_statements %}

{% block class_definition %}
class {{ entity_class }}ControllerTest extends WebTestCase
{% endblock class_definition %}
{
{% block class_body %}

{%- if 'new' in actions %}
    public function testCreate()
    {
        $client = static::createClient();
        $crawler = $client->request('GET', '/{{ route_prefix }}/');
        $this->assertCount(0, $crawler->filter('table.records_list tbody tr'));
        $crawler = $client->click($crawler->filter('.new_entry a')->link());
        $form = $crawler->filter('form button[type="submit"]')->form(array(
            {% for field, metadata in fields if field != 'id' %}
'{{ form_type_name|lower }}[{{ field }}]' => {{ fieldValue(metadata) }},
            {% endfor %}
        ));
        $client->submit($form);
        $crawler = $client->followRedirect();
        $crawler = $client->click($crawler->filter('.record_actions a')->link());
        $this->assertCount(1, $crawler->filter('table.records_list tbody tr'));
    }

    public function testCreateError()
    {
        $client = static::createClient();
        $crawler = $client->request('GET', '/{{ route_prefix }}/new');
        $form = $crawler->filter('form button[type="submit"]')->form();
        $crawler = $client->submit($form);
        $this->assertGreaterThan(0, $crawler->filter('form div.has-error')->count());
        $this->assertTrue($client->getResponse()->isSuccessful());
    }

    /**
     * @depends testCreate
     */
    public function testEdit()
    {
        $client = static::createClient();
        $crawler = $client->request('GET', '/{{ route_prefix }}/');
        $this->assertCount(1, $crawler->filter('table.records_list tbody tr:contains("First value")'));
        $this->assertCount(0, $crawler->filter('table.records_list tbody tr:contains("Changed")'));
        $crawler = $client->click($crawler->filter('table.records_list tbody tr td .btn-group a')->eq(1)->link());
        $form = $crawler->filter('form button[type="submit"]')->form(array(
            {% for field, metadata in fields if field != 'id' %}
'{{ form_type_name|lower }}[{{ field }}]' => {{ fieldValue(metadata, 'Changed') }},
            {% endfor %}
// ... adapt fields value here ...
        ));
        $client->submit($form);
        $crawler = $client->followRedirect();
        $crawler = $client->click($crawler->filter('.record_actions a')->link());
        $this->assertCount(0, $crawler->filter('table.records_list tbody tr:contains("First value")'));
        $this->assertCount(1, $crawler->filter('table.records_list tbody tr:contains("Changed")'));
    }

    /**
     * @depends testCreate
     */
    public function testEditError()
    {
        $client = static::createClient();
        $crawler = $client->request('GET', '/{{ route_prefix }}/');
        $crawler = $client->click($crawler->filter('table.records_list tbody tr td .btn-group a')->eq(1)->link());
        $form = $crawler->filter('form button[type="submit"]')->form(array(
            '{{ form_type_name|lower }}[field_name]' => '',
            // ... use a required field here ...
        ));
        $crawler = $client->submit($form);
        $this->assertGreaterThan(0, $crawler->filter('form div.has-error')->count());
    }

    /**
     * @depends testCreate
     */
    public function testDelete()
    {
        $client = static::createClient();
        $crawler = $client->request('GET', '/{{ route_prefix }}/');
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertCount(1, $crawler->filter('table.records_list tbody tr'));
        $crawler = $client->click($crawler->filter('table.records_list tbody tr td .btn-group a')->eq(0)->link());
        $client->submit($crawler->filter('form#delete button[type="submit"]')->form());
        $crawler = $client->followRedirect();
        $this->assertCount(0, $crawler->filter('table.records_list tbody tr'));
    }
    {%- if withFilter %}


    /**
     * @depends testCreate
     */
    public function testFilter()
    {
        $client = static::createClient();
        $crawler = $client->request('GET', '/{{ route_prefix }}/');
        $form = $crawler->filter('div#filter form button[type="submit"]')->form(array(
            {% for field, metadata in fields if field != 'id' %}
'{{ form_type_name|lower }}_filter[{{ field }}]' => {{ fieldValue(metadata, 'First%') }},
            {% endfor %}
// ... maybe use just one field here ...
        ));
        $client->submit($form);
        $crawler = $client->followRedirect();
        $this->assertTrue($client->getResponse()->isSuccessful());
        $crawler = $client->click($crawler->filter('div#filter a')->link());
        $crawler = $client->followRedirect();
        $this->assertTrue($client->getResponse()->isSuccessful());
    }
    {%- endif %}
    {%- if withSort %}
    /**
     * @depends testCreate
     */
    public function testSort()
    {
        $client = static::createClient();
        $crawler = $client->request('GET', '/{{ route_prefix }}/');
        $this->assertCount(1, $crawler->filter('table.records_list th')->eq(0)->filter('a i.fa-sort'));
        $crawler = $client->click($crawler->filter('table.records_list th a')->link());
        $crawler = $client->followRedirect();
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertCount(1, $crawler->filter('table.records_list th a i.fa-sort-up'));
    }
    {%- endif %}
{%- else %}
    public function testList()
    {
        $client = static::createClient();
        $crawler = $client->request('GET', '/{{ route_prefix }}/');
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertCount(0, $crawler->filter('table.records_list tbody tr'));
    }
{%- endif %}

{% endblock class_body %}
}
